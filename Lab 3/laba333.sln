
#include "cmath"
#include <iostream>
#include <limits>
#include <string>
#include <ctime>
using namespace std;

int s = 0; 
double In_Prove(double var);
int In_Prove(int var);

class wheel {
    double current_mileage;
    int status; //статус поврежденности/неповрежденности текущего колеса 

public:
    int check_status(double mileage, double speed);
    wheel(){ 
        status = 0; 
        current_mileage = 0; 
    };
    
    double def_wheel(double mileage, double speed){
        current_mileage = mileage;
        status = check_status(mileage, speed);
        return current_mileage;
    }
    virtual void output();

    int get_status(){ return status; }
};

class engine {
protected:
    double eng_power; 
    double engIntake; //[л/км]

public:
    inline double calc_Intake() 
    { 
        return fabs(pow(eng_power, 1 / 3) + sqrt(eng_power) - 6.25);
    }
    engine() 
    { 
        engIntake = 0; 
        eng_power = 0;
    };
    void def_engine(double v_power);
    virtual void output();
};

class fuel_system {
protected:
    double current_fuel; //[л];
public:
    double TankCapacity; //[л]
    void calculate_cur_fuel(double engIntake, double mileage, double Refuel);
    fuel_system() { TankCapacity = 0; current_fuel = 0; };
    void def_fuel_system(double capacity, double engIntake, double mileage);
    virtual void output();
};

class vehicle : public engine, public fuel_system {
private:
    int Nwheels;  // [шт]
    double speed; //[км/ч]
    double Time;    //[ч]
    int damaged_wheels = 0;
    double mileage; // [км]
    double Refuel; 

public:
    wheel* ptr_wheel;
    string name;
    vehicle() {
        name = "ADDVEHICLE";
        Time = mileage = Refuel = damaged_wheels = 0;
        ptr_wheel = 0;
    }

    vehicle(string v_name, int wheels) {
        mileage = damaged_wheels = 0;
        setName(v_name);
        setNwheels(wheels);
        ptr_wheel = new wheel[wheels];
        for (int i = 0; i < wheels; i++) {
            ptr_wheel[i] = wheel();
        }
        def_fuel_system(0, engIntake, mileage);
        def_engine(0);
        calculateSpeed();
    }

    void calculateSpeed();

    void setName(string v_name){ 
        name = v_name; 
    }

    void setNwheels(int wheels){ 
        Nwheels = wheels; 
    }

    void setMileage(double v_track){ 
        mileage = v_track; 
    }

    ~vehicle() { 
        cout << "Destruction of " << name << endl; 
    }
    
    inline void calculateRaceTime(double raceLength){
        Time = (raceLength / speed);
    };

    double get_Time() { 
        return Time; 
    };

    double get_Refuel() { 
        return Refuel; 
    };

    double get_speed() { 
        return speed; 
    };

    void calculateRefuel(double raceLength);

    void time_display();

    int getNwheels() { 
        return Nwheels; 
    }

    void number_of_damaged_wheels();

    void output();

    friend vehicle* RatingRes(int s);
    friend void outputRes(vehicle*& car, int s);

    friend ostream& operator<<(ostream& stream, const vehicle& obj){
        return stream << "the number of wheels: " << obj.Nwheels << ";\n"
            << "damaged wheels: " << obj.damaged_wheels << ";\n"
            << "speed: " << obj.speed << " km/h;\n"
            << "mileage: " << obj.mileage << " km;\n"
            << "fuel capacity: " << obj.TankCapacity << "l;\n"
            << "current fuel: " << obj.current_fuel << "l\n"
            << "engine power: " << obj.eng_power << " HP;\n"
            << "engine intake: " << obj.engIntake << " l/100km;" << endl;
    }
};

	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {D76F393D-7548-4E68-B9FC-DEE560933EF8}
	EndGlobalSection
EndGlobal
