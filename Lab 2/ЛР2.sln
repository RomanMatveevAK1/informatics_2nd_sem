#include <iostream>
#include "cmath"
#include <limits>
#include <string>

using namespace std;

int s = 0; 

double Inp_Prove(double var);
int Inp_Prove(int var);

class vehicle {
private:
    double Tank; // [л]
    double speed; // [км/ч] 
    double engIntake; //[л/км] 
    double engPow; // [л.с.]
    int cnt_wheels;

public:
    string name;
    double mileage; // [км]
    double Refuels; 
    double Time; // [ч:мин:с]!!!!!!!!!

    inline double calc_speed() {

        return fabs(sqrt(engPow) * ((70 / double(cnt_wheels)) - 2.5));   //Функция fabs() в C++ возвращает абсолютное значение числа
    }

    inline double calculateIntake(){

        return fabs(pow(engPow, 1 / 3) + sqrt(engPow) - 6.25);
    }

    double calc_Refuel(double raceLength){

        double Refuels = (raceLength * (engIntake / 100)) / Tank;

        if (Refuels > 1)
            return ceil(Refuels); //Функция ceil(arg) в C++ вычисляет ближайшее целое число, 
                                  //большее или равное arg, и возвращает его в виде числа с плавающей точкой
        else
            return floor(Refuels); //Функция floor () в C++ возвращает максимально возможное целочисленное значение, 
                                   //которое меньше или равно заданному аргументу.
    };

    inline double calculateRaceTime(double raceLength) {
        return (raceLength / speed);
    };
    vehicle() {
        name = "ABCDE";
        mileage = Time = Refuels = 0;
    }

    vehicle(string vehicle_name, double v_tank, double power, int wheels) {
        mileage = Time = Refuels = 0;
        cout << "\nName of the car: ";
        cin >> vehicle_name;
        setName(vehicle_name);
        cout << "Number of wheels: ";
        wheels = Inp_Prove(wheels);

        while ((wheels < 2) || (wheels == 5) || (wheels == 7)){
            cout << "Oh! It's uncorrect number of wheels! Try again." << endl;
            wheels = Inp_Prove(wheels);
        }

        set_cnt_wheels(wheels);
        cout << "The power of the engine (hp): ";
        power = Inp_Prove(power);
        setEnginePower(power);
        cout << "Tank capacity (l): ";
        v_tank = Inp_Prove(v_tank);
        set_Tank(v_tank);
        speed = calc_speed();
        engIntake = calculateIntake();
        cout << "\nCar added successfully!" << endl;
    }

    void set_Tank(double v_tank) {
        Tank = v_tank;
    }

    void setEnginePower(double power) { 
        engPow = power; 
    }

    void setName(string vehicle_name) { 
        name = vehicle_name; 
    }

    void set_cnt_wheels(int wheels) { 
        cnt_wheels = wheels; 
    }

    ~vehicle() { 
        cout << "Destruction of " << name << endl; 
    }

    void output();
    void time_display();
};

int menu(int& flag);

void clear(int var = 1);

void creatingTransport(vehicle*& adr, int& s, vehicle cars);

vehicle* Rating_Res(vehicle*& adr, int s);

void output_Res(vehicle*& adr, int s);

int main() {
    clear();
    vehicle* adr = nullptr;
    double trackLen = 0;
    int flag = 1;
    int r = 0;
    while (flag == 1) {
        int choice = 10;
        choice = menu(r);
        if ((choice > 5) || (choice < 0)) {
            cout << "\nERROR!\n";
        }

        switch (choice) {
        case (0): {
            cout << "Are you sure that you want to exit this App?\n1 - Yes\n0 - No\n";
            int exit = 2;
            exit = Inp_Prove(exit);
            if (exit == 1) {
                flag = 0;
                break;
            }
            else {
                clear();
            }
            break;
        }

        delete[] adr;
        break;

        case (1): {
            clear();
            string vehicle_name = "";
            double v_tank = 0;
            double power = 0;
            int cnt_wheels = 0;
            vehicle cars(vehicle_name, v_tank, power, cnt_wheels);
            clear();
            creatingTransport(adr, s, cars);
            r = 0;
            break;
        }

        case (2): {
            clear();
            for (int i = 0; i < s; i++) {
                cout << adr[i].name << endl;
                adr[i].output();
            }
            break;
        }

        case (3): {
            clear();
            cout << "Enter the length of the track (km): ";
            trackLen = Inp_Prove(trackLen);
            r = 0;
            break;
        }

        case (4): {
            clear();

            if (trackLen == 0) {
                cout << "You haven't entered the length of the track!\n";
                r = 0;
                break;
            }
            else {
                for (int i = 0; i < s; i++) {
                    adr[i].Time = adr[i].calculateRaceTime(trackLen);
                    adr[i].mileage = trackLen;
                    adr[i].Refuels = adr[i].calc_Refuel(trackLen);
                }
            }
            break;
        }

        case (5): {
            clear();
            output_Res(*&adr, s);
            break;
        }

        default:
            clear();
            break;
        }
    }

    return 0;
}


int menu(int& r) {
    cout << "\n------------------------||MENU||-------------------------\n";
    cout << "0 - EXIT\n";
    cout << "1 - ADD TRANSPORT\n";
    cout << "2 - OUTPUT THE INFORMATION ABOUT THE TRANSPORT\n";
    cout << "3 - ENTERING LENGTH OF THE TRACK\n";
    cout << "4 - ROUTE CALCULATING\n"; 

    if (r == 1)
        cout << "5 - RESULTS OF THE LAST RASE\n";
    int choice = 0;
    choice = Inp_Prove(choice);
    if (choice == 4) {
        r = 1;
    }
    return choice;
}

void creatingTransport(vehicle*& adr, int& s, vehicle cars) {
    vehicle* tempArray;
    if (adr != nullptr) {
        tempArray = new vehicle[s + 1];
        for (int i = 0; i < s; i++) {
            tempArray[i] = adr[i];
        }

        delete[] adr;
    }

    else {
        tempArray = new vehicle[1];
    }

    tempArray[s] = cars;

    adr = tempArray;
    s++;
}

vehicle* Rating_Res(vehicle*& adr, int s) {
    vehicle* results = new vehicle[s];
    vehicle* r_copy = new vehicle[1];
    for (int i = 0; i < s; i++) {
        results[i] = adr[i];
    }
    for (int i = 0; i < s; i++) {
        for (int j = 0; j < s; j++) {
            if ((results[i].Time - results[j].Time < 0) &&
                (results[i].Refuels - results[i].Refuels <= 0)) {
                r_copy[0] = results[i];
                results[i] = results[j];
                results[j] = r_copy[0];
            }
        }
    }
    delete[] r_copy;
    return results;
}

void output_Res(vehicle*& adr, int s){
    vehicle* results = Rating_Res(adr, s);

    for (int i = 0; i < s; i++){
        cout << results[i].name << endl;
        results[i].time_display();
        cout << "Refuel times: " << int(ceil(results[i].Refuels)) << endl;
    }

    delete[] results;
}

double Inp_Prove(double var) {
    cin >> var;

    if (cin.fail() || var <= 0) {
        while (!(cin >> var) || var <= 0) {
            cout << "Oh! It's uncorrect entering! Try again.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
    }
    return var;
}

int Inp_Prove(int var){
    cin >> var;

    if (cin.fail() || var < 0){
        while (!(cin >> var) || var < 0) {
            cout << "Oh! It's uncorrect entering! Try again.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
    }

    return var;
}

void vehicle::time_display() {
    double t = this->Time;
    int hours = static_cast<int>(t);
    double c_time = (t - hours) * 60;
    int minutes = static_cast<int>((c_time));
    int seconds = static_cast<int>((c_time - minutes) * 60);
    cout << "time: " << hours << ":" << minutes << ":" << seconds << endl;
}

void clear(int var){
    for (int i = 0; i < 3; i = i + 1) {
        cout << "\n";
    }
}

void vehicle::output() {
    cout << "The number of wheels: " << cnt_wheels << ";\n"
        << "The power of engine: " << engPow << " hp;\n"
        << "Speed: " << speed << " km/h;\n"
        << "Engine intake: " << engIntake << " l/100 km;\n"
        << "Mileage: " << mileage << " km;" << endl;
}
